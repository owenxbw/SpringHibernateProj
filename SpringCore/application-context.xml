<?xml version="1.0" encoding="UTF-8"?>
<beans
	xsi:schemaLocation=" 
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd 
	
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx">
	<context:component-scan base-package="net.antra" />
 	
 
 <!-- This produces a container-managed EntityManagerFactory; 
         rather than application-managed EntityManagerFactory as in case of LocalEntityManagerFactoryBean-->
   <!--  <bean id="entityManagerFactoryBean" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
      <property name="dataSource" ref="dataSource" />
      This makes /META-INF/persistence.xml is no longer necessary
      <property name="packagesToScan" value="net.antra.deptemp.entity" />
      JpaVendorAdapter implementation for Hibernate EntityManager.
           Exposes Hibernate's persistence provider and EntityManager extension interface
      <property name="jpaVendorAdapter">
         <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
      </property>
      <property name="jpaProperties">
         <props>
            <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                  <prop key="hibernate.show_sql">true</prop>
            
         </props>
      </property>
   </bean> -->
  
   <!-- Simple implementation of the standard JDBC DataSource interface, 
        configuring the plain old JDBC DriverManager via bean properties -->
<!--    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
      <property name="driverClassName" value="com.mysql.jdbc.Driver" />
      <property name="url" value="jdbc:mysql://localhost:3306/dept_emp_proj" />
      <property name="username" value="root" />
      <property name="password" value="1234" />
   </bean> -->
     
    <!-- This transaction manager is appropriate for applications that use a single JPA EntityManagerFactory for transactional data access. 
        JTA (usually through JtaTransactionManager) is necessary for accessing multiple transactional resources within the same transaction. -->
 <!--    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
      <property name="entityManagerFactory" ref="entityManagerFactoryBean" />
   </bean> -->
    
   <!-- responsible for registering the necessary Spring components that power annotation-driven transaction management; 
        such as when @Transactional methods are invoked -->
  <!--  <tx:annotation-driven />
	 -->
</beans>